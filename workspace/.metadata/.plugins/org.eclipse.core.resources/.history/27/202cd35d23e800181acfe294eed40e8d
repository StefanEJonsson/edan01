package photo;

import java.util.ArrayList;

import org.jacop.constraints.Alldiff;
import org.jacop.constraints.Constraint;
import org.jacop.constraints.Distance;
import org.jacop.constraints.Or;
import org.jacop.constraints.PrimitiveConstraint;
import org.jacop.constraints.SumWeight;
import org.jacop.constraints.XmulCeqZ;
import org.jacop.constraints.XneqC;
import org.jacop.constraints.XneqY;
import org.jacop.constraints.XplusYeqZ;
import org.jacop.core.IntVar;
import org.jacop.core.Store;
import org.jacop.search.DepthFirstSearch;
import org.jacop.search.IndomainMin;
import org.jacop.search.SelectChoicePoint;
import org.jacop.search.SimpleSelect;
import org.jacop.search.SmallestDomain;

import search.SimpleDFS;

public class Photo {

	Store store;
	
	public static void main(String[] args) {
		Photo p = new Photo();
		p.model();
	}
	
	public void model() {
		store = new Store();
		
		int n = 9;
		int n_prefs = 17;
		int[][] prefs = { { 1, 3 }, { 1, 5 }, { 1, 8 }, { 2, 5 }, { 2, 9 }, { 3, 4 }, { 3, 5 }, { 4, 1 }, { 4, 5 },
						  { 5, 6 }, { 5, 1 }, { 6, 1 }, { 6, 9 }, { 7, 3 }, { 7, 8 }, { 8, 9 }, { 8, 7 } };
		
		IntVar[] position = new IntVar[n];
		for(int i = 0; i < n; i++) {
			position[i] = new IntVar(store,"pos "+i,0,n-1);
		}
		
		IntVar[] distance = new IntVar[n_prefs];
		for(int i = 0; i < n_prefs; i++) {
			int[] pref = prefs[i];
			int a = pref[0]; //person id
			int b = pref[1]; //person id
			distance[i] = new IntVar(store,"distance between " + a + " -> " + b,1,n-1);
			Constraint c = new Distance(position[a-1],position[b-1],distance[i])
			store.impose(c);
		}
		
		
		
		
		/*
		ArrayList<ArrayList<Integer>> prefList = new ArrayList<ArrayList<Integer>>(n);
		for(int[] pref:prefs) {
			prefList.get(pref[0]-1).add(pref[1]);
		}
		
		*/
		
		
		System.out.println("Det funkar fortfarande!");
	}
	
	
}
